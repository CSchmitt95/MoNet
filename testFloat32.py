from pyparsing import delimited_list
from pyquaternion import Quaternion
import numpy as np
import struct 
from decimal import *
from numpy import genfromtxt

def float2bin(f):
    ''' Convert float to 64-bit binary string.

    Attributes:
        :f: Float number to transform.
    '''
    [d] = struct.unpack(">Q", struct.pack(">d", f))
    return f'{d:064b}'


data = [-0.6667164,-0.13293989, 0.35670593,-0.64076304, -0.66609234,-0.13077115,0.35456434,-0.6430428]

q1 = Quaternion(data[0],data[1], data[2],data[3])
q2 = Quaternion(data[4],data[5], data[6],data[7])
inverse = q1.inverse

print("Inverse: " + str(inverse))
print("W: " + str(float2bin(inverse[0])))
print("X: " + str(float2bin(inverse[1])))
print("Y: " + str(float2bin(inverse[2])))
print("Z: " + str(float2bin(inverse[3])))

'''
1: Java32
2: Python64     -0.667              + 0.133i                -0.357j              + 0.641k
3: Java64       -0.6667163173298457 + 0.13293987417937825i +-0.3567058912866245j + 0.6407629679724016k


1 00001111110 01010101010110111101 100
1 01111111110 01010101010110111101 01100110001011110011101000100110
1 01111111110 01010101010110111101 01110101010101001000010100010101

0 00001111100 00010000010000101100 100
0 01111111100 00010000010000101100 01110000011101100111111111001011
0 01111111100 00010000010000101100 01111101111101111010011100000100

1 00001111101 01101101010001000101 000
1 01111111101 01101101010001000100 11011100001101100010111101001101
1 01111111101 01101101010001000100 11110010010101110111011000011011


0 00001111110 01001000000100100001 011
0 01111111110 01001000000100100001 01000100011100101111100010010001
0 01111111110 01001000000100100001 01010110111111011011110101010010
'''

diff = q2*q1.inverse
print("DIFF: " + str(diff[0]) + " + " + str(diff[1]) + "i + " + str(diff[2]) + "j + " + str(diff[3]) + "k")
print("W: " + str(float2bin(diff[0])))
print("X: " + str(float2bin(diff[1])))
print("Y: " + str(float2bin(diff[2])))
print("Z: " + str(float2bin(diff[3])))


'''
1. Java_32      111111011111111111111110000011  +10111011011010001000110011000000i  +10111001111111111001010100000000j  +111010101110111000111000000000k
2. Python_64    0.9999924850030688              + -0.0035484270972563348i           + -0.0004874921255212522j           + 0.0014309280452265982k
3. Java_64:     0.9999925323666208              + -0.0035484329730705033i           + -4.874920057583998E-4j            + 0.0014309264094685692k

0 00001111110 11111111111111110000 011
0 01111111110 11111111111111110000 00111101011010101010111110111010
0 01111111110 11111111111111110000 01010110110110000100100010010000

1 00001110110 11010001000110011000 000
1 01111110110 11010001000110010111 01001010101101111111011000000000
1 01111110110 11010001000110011010 01110010010010001100101100000000

1 00001110011 11111111001010100000 000
1 01111110011 11111111001011000010 10111100011101011011100100000000
1 01111110011 11111111001011000010 00111000110001110111101000000000

0 00001110101 01110111000111000000 000
0 01111110101 01110111000110111111 01001010000011110011001000000000
0 01111110101 01110111000110111101 10001000011011001111010100000000

'''


array = np.array([diff[0], diff[1], diff[2], diff[3]]).astype(np.float32)

print(float2bin(array[0]))

'''
print(str(round(diff[0], 8)))

print(str(round(diff[0], 8)) + " + " + str(round(diff[1], 8))+ "i + " + str(round(diff[2], 8))+ "j + " + str(round(diff[3], 8))+ "k")
print(array)

'''

